const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

async function testOTPFunctionality() {
  console.log('üß™ Testing OTP Functionality...\n');

  const testEmail = 'test-otp@example.com';
  const testOTP = '123456'; // This will be generated by the server

  try {
    // Test 1: Send OTP
    console.log('1Ô∏è‚É£ Testing Send OTP...');
    const sendResponse = await axios.post(`${BASE_URL}/otp/send`, {
      email: testEmail,
      purpose: 'email_verification'
    });
    console.log('‚úÖ Send OTP Response:', sendResponse.data);

    // Test 2: Get OTP Status
    console.log('\n2Ô∏è‚É£ Testing Get OTP Status...');
    const statusResponse = await axios.get(`${BASE_URL}/otp/status?email=${testEmail}&purpose=email_verification`);
    console.log('‚úÖ OTP Status Response:', statusResponse.data);

    // Test 3: Verify OTP (this will fail with wrong OTP)
    console.log('\n3Ô∏è‚É£ Testing Verify OTP with wrong code...');
    try {
      await axios.post(`${BASE_URL}/otp/verify`, {
        email: testEmail,
        otp: '000000',
        purpose: 'email_verification'
      });
    } catch (error) {
      console.log('‚úÖ Expected error for wrong OTP:', error.response.data.message);
    }

    // Test 4: Resend OTP
    console.log('\n4Ô∏è‚É£ Testing Resend OTP...');
    const resendResponse = await axios.post(`${BASE_URL}/otp/resend`, {
      email: testEmail,
      purpose: 'email_verification'
    });
    console.log('‚úÖ Resend OTP Response:', resendResponse.data);

    // Test 5: Test with invalid email
    console.log('\n5Ô∏è‚É£ Testing with invalid email...');
    try {
      await axios.post(`${BASE_URL}/otp/send`, {
        email: 'invalid-email',
        purpose: 'email_verification'
      });
    } catch (error) {
      console.log('‚úÖ Expected validation error:', error.response.data.message);
    }

    console.log('\nüéâ OTP functionality tests completed!');
    console.log('\nüìß To test with real email:');
    console.log('1. Update EMAIL_USER and EMAIL_PASSWORD in .env file');
    console.log('2. Use a real email address in the test');
    console.log('3. Check your email for the OTP code');

  } catch (error) {
    console.error('‚ùå Test failed:', error.response?.data || error.message);
  }
}

// Test email service configuration
async function testEmailConfig() {
  console.log('\nüìß Testing Email Configuration...');
  
  try {
    const response = await axios.post(`${BASE_URL}/otp/send`, {
      email: 'test@example.com',
      purpose: 'email_verification'
    });
    
    if (response.data.success) {
      console.log('‚úÖ Email service is configured correctly');
    } else {
      console.log('‚ùå Email service configuration issue:', response.data.message);
    }
  } catch (error) {
    console.log('‚ùå Email service error:', error.response?.data?.message || error.message);
    console.log('\nüîß To fix email configuration:');
    console.log('1. Update .env file with your Gmail credentials:');
    console.log('   EMAIL_USER=your-email@gmail.com');
    console.log('   EMAIL_PASSWORD=your-app-password');
    console.log('2. Enable 2-Factor Authentication on your Google account');
    console.log('3. Generate an App Password for this application');
  }
}

// Run tests
async function runTests() {
  await testOTPFunctionality();
  await testEmailConfig();
}

runTests().catch(console.error);
